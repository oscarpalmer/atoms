.fill {
	flex: 1;
}

.flow,
.stack {
	display: flex;
}

.flow {
	flex-flow: row wrap;
	gap: var(--flow-gap, 1rem);
	align-items: center;

	&-large {
		gap: calc(2 * var(--flow-gap, 1rem));
	}

	&-nowrap {
		flex-wrap: nowrap;
	}

	&-reverse {
		flex-flow: row-reverse wrap-reverse;
	}

	&-small {
		gap: calc(0.5 * var(--flow-gap, 1rem));
	}

	&-nogap {
		gap: 0;
	}
}

.stack {
	flex-flow: column nowrap;
	gap: var(--stack-gap, 1rem);

	&-large {
		gap: calc(2 * var(--stack-gap, 1rem));
	}

	&-reverse {
		flex-flow: column-reverse nowrap;
	}

	&-small {
		gap: calc(0.5 * var(--stack-gap, 1rem));
	}

	&-nogap {
		gap: 0;
	}
}

$alignmentOrigins: (c: 'content', i: 'items', s: 'self');
$alignmentValues: (c: 'center', fe: 'flex-end', fs: 'flex-start', s: 'stretch');
$justificationValues: (sa: 'space-around', sb: 'space-between', se: 'space-evenly');
$types: (a: 'align', j: 'justify');

@each $typeKey, $typeValue in $types {
	@each $alignmentOriginKey, $alignmentOriginValue in $alignmentOrigins {
		.flex-#{$typeKey}#{$alignmentOriginKey} {
			@each $alignmentValueKey, $alignmentValueValue in $alignmentValues {
				&-#{$alignmentValueKey} {
					#{$typeValue}-#{$alignmentOriginValue}: #{$alignmentValueValue}
				}
			}
		}
	}

	@each $justificationValueKey, $justificationValueValue in $justificationValues {
		.flex-#{$typeKey}c-#{$justificationValueKey} {
			#{$typeValue}-content: #{$justificationValueValue}
		}
	}
}
